Certainly, I can translate the given text into English for inclusion in an article. The text discusses an example of Event-Driven Programming, focusing on how an object (in this case, a student) is manipulated through events. Here is the translated version:

Event-Driven Programming: A Practical Example with a Student Object

In contrast to object-oriented programming, event-driven programming centers around events. While utilizing object-oriented programming techniques is integral in this approach, everything revolves around events. In this method, even the data is driven by events. Let's take the example of a student object.

Initially, when created, the student object looks like this: STUDENT:{NAME:UNDEFINED, LASTNAME:UNDEFINED, SCORE:UNDEFINED, EVENTS:[]}.

Using the AddEvent method, events can be added as follows:

student.addEvent({NAME:"Mustafa", InsertTime:"1.1.2000 1:00", inserter:{name:application, user:Ali}});

After this event is added, the student object becomes:

STUDENT:{NAME:"Mustafa", LASTNAME:UNDEFINED, SCORE:UNDEFINED, EVENTS:[ {inserter:{field:"NAME", Value:"Mustafa", name:application, user:Ali, InsertTime:"1.1.2000 1:00"}} ]}

student.addEvent({LASTNAME:"Kaplan", InsertTime:"2.1.2000 3:00", inserter:{name:application, user:Ali}});

Following this event, the object updates to:

STUDENT:{NAME:"Mustafa", LASTNAME:"Kaplan", SCORE:UNDEFINED, EVENTS:[ {inserter:{field:"NAME", Value:"Mustafa", name:application, user:Ali, InsertTime:"1.1.2000 1:00"}, {inserter:{field:"LASTNAME", Value:"Kaplan", name:application, user:Veli, InsertTime:"2.1.2000 3:00"}} ]}

student.addEvent({SCORE:12, InsertTime:"2.1.2000 5:00", inserter:{name:application, user:Ali}});

After this addition, it changes to:

STUDENT:{NAME:"Mustafa", LASTNAME:"Kaplan", SCORE:12, EVENTS:[ {inserter:{field:"NAME", Value:"Mustafa", name:application, user:Ali, InsertTime:"1.1.2000 1:00"}, {inserter:{field:"LASTNAME", Value:"Kaplan", name:application, user:Veli, InsertTime:"2.1.2000 3:00"}, {inserter:{field:"SCORE", Value:12, name:application, user:Ali, InsertTime:"2.1.2000 5:00"}} ]}

student.addEvent({SCORE:-5, InsertTime:"2.1.2000 7:00", inserter:{name:application, user:Ali}});

With this final event, the student object becomes:

STUDENT:{NAME:"Mustafa", LASTNAME:"Kaplan", SCORE:7, EVENTS:[ {inserter:{field:"NAME", Value:"Mustafa", name:application, user:Ali, InsertTime:"1.1.2000 1:00"}, {inserter:{field:"LASTNAME", Value:"Kaplan", name:application, user:Veli, InsertTime:"2.1.2000 3:00"}, {inserter:{field:"SCORE", Value:12, name:application, user:Ali, InsertTime:"2.1.2000 5:00"}, {inserter:{field:"SCORE", Value:-5, name:application, user:Ali, InsertTime:"2.1.2000 7:00"}} ]}

In this event-driven approach, the object's state is altered through a series of events, each characterized by specific data updates and time stamps. This model is highly useful in scenarios where the system's response to real-time interactions is crucial. It also demonstrates the fluidity and dynamic nature of event-driven programming, where the object's state is continuously evolving based on the events it encounters.

This translation maintains the technical nature of the original text while ensuring it is comprehensible for an English-speaking audience, suitable for inclusion in an academic or technical article.